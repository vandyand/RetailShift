name: Legacy Adapter CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "services/legacy-adapter/**"
      - ".github/workflows/legacy-adapter-ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "services/legacy-adapter/**"
      - ".github/workflows/legacy-adapter-ci.yml"

env:
  SERVICE_NAME: legacy-adapter
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/retailshift-legacy-adapter

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"
          cache: "maven"

      - name: Install Leiningen
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          lein: 2.9.10

      - name: Cache Leiningen dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-lein-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-lein-

      - name: Run tests
        working-directory: services/legacy-adapter
        run: lein run-tests

      - name: Generate test coverage
        working-directory: services/legacy-adapter
        run: lein coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: services/legacy-adapter/target/coverage

  build:
    name: Build and Push Docker image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/legacy-adapter
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v2
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      - name: Set image tag
        run: |
          echo "IMAGE_TAG=sha-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        working-directory: services/legacy-adapter
        run: |
          sed -i "s|retailshift/legacy-adapter:latest|${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/legacy-adapter -n retailshift

  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v2
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Set image tag
        run: |
          echo "IMAGE_TAG=sha-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        working-directory: services/legacy-adapter
        run: |
          sed -i "s|retailshift/legacy-adapter:latest|${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/legacy-adapter -n retailshift
