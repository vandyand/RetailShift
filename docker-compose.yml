version: "3.9"

# Default platform for all services
x-default-settings: &default-settings
  platform: linux/arm64

services:
  # Legacy POS system simulator (PostgreSQL)
  legacy-pos-db:
    <<: *default-settings
    image: postgres:13
    container_name: legacy-pos-db
    environment:
      POSTGRES_DB: legacy_pos
      POSTGRES_USER: legacy_user
      POSTGRES_PASSWORD: legacy_password
    ports:
      - "5432:5432"
    volumes:
      - legacy-pos-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legacy_user -d legacy_pos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for modern data storage
  mongodb:
    <<: *default-settings
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=retailshift
      - MONGO_INITDB_ROOT_PASSWORD=retailshift
    restart: unless-stopped

  # Kafka and Zookeeper for event streaming
  zookeeper:
    <<: *default-settings
    image: confluentinc/cp-zookeeper:7.3.3
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    restart: unless-stopped

  kafka:
    <<: *default-settings
    image: confluentinc/cp-kafka:7.3.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped

  # Redis for caching
  redis:
    <<: *default-settings
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    <<: *default-settings
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    <<: *default-settings
    image: grafana/grafana:9.5.1
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    <<: *default-settings
    image: jaegertracing/all-in-one:1.37
    container_name: jaeger
    ports:
      - "16686:16686" # UI
      - "14268:14268" # Collector
      - "6831:6831/udp" # Agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411

  # Our legacy adapter service
  legacy-adapter:
    <<: *default-settings
    build:
      context: ./services/legacy-adapter
      dockerfile: Dockerfile
    container_name: legacy-adapter
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_MONGODB_HOST=mongodb
      - SPRING_DATA_MONGODB_USERNAME=retailshift
      - SPRING_DATA_MONGODB_PASSWORD=retailshift
      - SPRING_DATA_MONGODB_DATABASE=legacy_adapter
      - LEGACY_DB_URL=jdbc:h2:mem:legacydb
      - LEGACY_DB_USERNAME=sa
      - LEGACY_DB_PASSWORD=password
    depends_on:
      - mongodb
      - kafka
    restart: unless-stopped

  # Inventory service
  inventory-service:
    <<: *default-settings
    build:
      context: ./services/inventory
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_MONGODB_HOST=mongodb
      - SPRING_DATA_MONGODB_USERNAME=retailshift
      - SPRING_DATA_MONGODB_PASSWORD=retailshift
      - SPRING_DATA_MONGODB_DATABASE=inventory
      - SPRING_REDIS_HOST=redis
    depends_on:
      - mongodb
      - kafka
      - redis
    restart: unless-stopped

  # Data Visualizer Backend - Handles real-time data processing
  data-visualizer-backend:
    <<: *default-settings
    build:
      context: ./services/data-visualizer
      dockerfile: Dockerfile.backend
    container_name: data-visualizer-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP=data-visualizer-group
    depends_on:
      - kafka
    restart: unless-stopped

  # Data Visualizer Frontend - Provides the dynamic dashboard UI
  data-visualizer-frontend:
    <<: *default-settings
    build:
      context: ./services/data-visualizer
      dockerfile: Dockerfile.frontend
    container_name: data-visualizer-frontend
    ports:
      - "8083:80"
    depends_on:
      - data-visualizer-backend
    restart: unless-stopped

volumes:
  legacy-pos-data:
  mongodb-data:
  grafana-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  prometheus-data:
